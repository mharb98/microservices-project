version: '3.8'
services:
  users:
    build: 
      context: ./users-service
      target: production
    image: users
    container_name: users
    env_file:
      - ./users-service/.env
    ports:
      - "3001:3000"
      - "5555:5555"
    volumes:
      - ./users-service:/app
      # - /app/node_modules
    depends_on:
      - postgresdb
      - redis-service
      - kafka
    extra_hosts:
      - "host.docker.internal:192.168.1.9"
  organizations:
    build: 
      context: ./organizations-service
      target: production
    image: organizations
    container_name: organizations
    env_file:
      - ./organizations-service/.env
    ports:
      - "3002:3000"
    volumes:
      - ./organizations-service:/app
      # - /app/node_modules
    depends_on:
      - mongodb
      - kafka
  postgresdb:
    image: postgres
    container_name: postgresdb
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: users_service
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  redis-service: 
    image: redis:7.0.9-alpine
    container_name: redis-service
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning 
    volumes:
      - redisdata:/data
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    volumes:
      - mongodata:/data/db
    ports:
      - '27018:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9094:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

volumes:
  pgdata:
  redisdata:
  mongodata:
  zookeeper_data:
  kafka_data: